from __future__ import annotations
from typing import Optional

# Mindustry class
from .Item import Item, ItemStack

class Block:
    def __init__(self, hasItems: bool = True, hasLiquids: bool = True, hasPower: bool = True, outputLiquid: bool = False, consumePower: bool = True, outputPower: bool = False, connectedPower: bool = True, conductivePower: bool = False, outputsPayload: bool = False, acceptsPayloads: bool = False, acceptsPayload: bool = False, acceptsItems: bool = False, separateItemCapacity: bool = False, itemCapacity: int = 10, liquidCapacity: float = 10.0, liquidPressure: float = 1.0, outputFacing: bool = True, noSideBlend: bool = False, displayFlow: bool = True, inEditor: bool = True, saveConfig: bool = False, copyConfig: bool = True, clearOnDoubleTap: bool = True, update: bool = True, destructible: bool = True, unloadable: bool = True, isDuct: bool = False, allowResupply: bool = False, solid: bool = True, solidifies: bool = True, underBullets: bool = True, rotate: bool = True, rotateDraw: bool = True, lockRotation: bool = True, invertFlip: bool = False, variants: int = 0, drawArrow: bool = True, drawTeamOverlay: bool = True, saveData: bool = True, breakable: bool = True, rebuildable: bool = True, privileged: bool = False, requiresWater: bool = False, placableLiquid: bool = False, placeablePlayer: bool = True, placeableOn: bool = True, insulated: bool = False, squareSprite: bool = True, absorbLasers: bool = False, enableDrawStatus: bool = True, drawDisabled: bool = True, autoResetEnabled: bool = True, noUpdateDisabled: bool = False, updateInUnits: bool = True, alwaysUpdateInUnits: bool = False, deconstructDropAllLiquid: bool = False, useColor: bool = True, itemDrop: Item = None, playerUnmineable: bool = False, attributes: Attributes = None, scaledHealth: float = -1.0, health: int = -1, armor: float = 0.0, baseExplosiveness: float = 0.0, destroyBullet: BulletType = None, destroyBulletSameTeam: bool = False, lightLiquid: Liquid = None, drawCracks: bool = True, createRubble: bool = True, floating: bool = False, size: int = 1, offset: float = 0.0, sizeOffset: int = 0, clipSize: float = -1.0, placeOverlapRange: float = 50.0, crushDamageMultiplayer: float = 1.0, timers: int =0, cacheLayer: CacheLayer = CacheLayer.normal, fillsTile: bool = True, forceDark: bool = False, alwaysReplace: bool = False, replaceable: bool = True, group: BlockGroup = BlockGroup.none, flag = [], priority: float = TargetPriority.base, unitCapModifier: int = 0, configurable: bool = True, ignoreResizeConfig: bool = True, commandable: bool = True, allowConfigInventory: bool = True, selectionRows: int = 5, selectionColumns: int = 4, logicConfigurable: bool = False, consumesTap: bool = True, drawLiquidLight: bool = True, envRequired: int = 0, envEnabled: int = Env.terrestrial, envDisabled: int = 0, sync: bool = True, conveyorPlacement: bool = True, swapDiagonalPlacement: bool = True, allowRectanglePlacement: bool = False, schematicPriority: int = 0, mapColor: str = "000000", hasColor: bool = False, targetable: bool = True, attacks: bool = False, suppressable: bool = False, canOverdrive: bool = True, outlineColor: str = "404049", outlineIcon: bool = False, outlineRadius: int = 4, outlinedIcon: int = -1, hasShadow: bool = True, customShadow: bool = False, placePitchChange: bool = True, breakPitchChange: bool = True, placeSound: Sound = Sounds.place, breakSound: Sound = Sounds.breaks, destroySound: Sound = Sounds.boom, albedo: float = 0.0, lighColor: str = "ffffff", emitLight: bool = False, lighRadius: float = 60.0, fogRadius: int = -1, loopSound: Sound = Sounds.none, loopSoundsVolume: float = 0.5, ambientSound: Sound = Sounds.none, ambientSoundVolume: float = 0.5, requirements: list[ItemStack] = {}, category: Category = Category.distribution, buildCost: float = 20.0, buildVisibility: BuildVisibility = BuildVisibility.hidden, buildCostMultiplier: float = 1.0, deconstructThreshold: float = 0.0, instantDeconstruct: bool = False, instantBuild: bool = False, placeEffect: Effect = Fx.placeBlock, breackEffect: Effect = Fx.breakBlock, destroyEffect: Efect = Fx.dynamicExplosion, researchCostMultiplier: int = 1, researchCost: list[ItemStack] = [], instantTransfer: bool = False, quickRotate: bool = True, allowDerelictRepair: bool = True, selectScroll: float = 0.0, buildtype = None, itemFilter: list = [], consumers: Consume = [], optionalConsumers: Consume = [], nonOptionalConsumers: Consume = [], updateConsumers: Consume = [], hasConsumers: bool = True, consPower: ConsumePower = None, ):
        pass